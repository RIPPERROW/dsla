{
  "methods": {
    "addAllowedTokens(address)": {
      "notice": "dev add a token to ve allowed for staking param _tokenAddress 1. address of the new allowed token"
    },
    "getAllowedTokensLength()": {
      "notice": "dev use this function to evaluate the length of the allowed tokens length return allowedTokens.length"
    },
    "isAllowedToken(address)": {
      "notice": "dev checks in the allowedTokens array if there's a token with _tokenAddress value param _tokenAddress 1. token address to check exixtence return true if _tokenAddress exists in the allowedTokens array"
    },
    "isStaker(address)": {
      "notice": "dev returns true if the _staker address is registered as staker param _staker 1. staker address return true if address is staker"
    },
    "stakeTokens(uint256,address)": {
      "notice": "dev stake _amount tokens into the _token contract param _amount 1. amount to be staked param _token 2. address of the ERC to be staked"
    },
    "withdrawUserTokens(uint256,address)": {
      "notice": "dev withdraw _amount tokens from the _token contract param _amount 1. amount to be staked param _tokenAddress 2. address of the ERC to be staked"
    }
  }
}
