{
  "details": "StakeRegistry is a contract to register the staking activity of the platform, along with controlling certain admin privileged parameters",
  "events": {
    "StakingParametersModified(uint256,uint256,uint256,uint256)": {
      "details": "event to log modifications on the staking parameters",
      "params": {
        "DSLAburnRate": "1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid",
        "minimumDSLAStakedTier1": "2. minimum stake of DSLA to enable tier 1 privileges",
        "minimumDSLAStakedTier2": "3. minimum stake of DSLA to enable tier 2 privileges",
        "minimumDSLAStakedTier3": "4. minimum stake of DSLA to enable tier 3 privileges"
      }
    }
  },
  "kind": "dev",
  "methods": {
    "addAllowedTokens(address)": {
      "details": "add a token to ve allowed for staking",
      "params": { "_tokenAddress": "1. address of the new allowed token" }
    },
    "constructor": { "params": { "_dslaTokenAddress": "1. DSLA Token" } },
    "createDToken(string,string)": {
      "details": "to create dTokens for staking",
      "params": { "_name": "1. token name", "_symbol": "2. token symbol" }
    },
    "getActivePool(address)": {
      "details": "returns the active pools owned by a user.",
      "params": { "_slaOwner": "1. owner of the active pool" },
      "returns": {
        "_0": "ActivePool[], array of structs: {SLAAddress,stake,assetName}"
      }
    },
    "owner()": { "details": "Returns the address of the current owner." },
    "registerStakedSla(address)": {
      "details": "register the sending SLA contract as staked by _owner",
      "params": { "_owner": "1. SLA contract to stake" }
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "setSLARegistry()": {
      "details": "sets the SLARegistry contract address and can only be called once"
    },
    "slaWasStakedByUser(address,address)": {
      "details": "public view function that returns true if the _owner has staked on _sla",
      "params": { "_user": "1. address to check", "_sla": "2. sla to check" },
      "returns": { "_0": "bool, true if _sla was staked by _user" }
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "stateVariables": {
    "_DSLAburnRate": {
      "details": "corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %"
    },
    "_minimumDSLAStakedTier1": {
      "details": "minimum deposit for Tier 1 staking"
    },
    "_minimumDSLAStakedTier2": {
      "details": "minimum deposit for Tier 2 staking"
    },
    "_minimumDSLAStakedTier3": {
      "details": "minimum deposit for Tier 3 staking"
    },
    "allowedTokens": {
      "details": "array with the allowed tokens addresses of the StakeRegistry"
    },
    "userStakedSlas": {
      "details": "(userAddress => SLA[]) with user staked SLAs to get tokenPool"
    }
  },
  "title": "StakeRegistry",
  "version": 1
}
