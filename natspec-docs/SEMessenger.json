{
  "details": "Staking efficiency Messenger",
  "methods": {
    "constructor": {
      "details": "parameterize the variables according to network",
      "params": {
        "_messengerChainlinkOracle": "1. the address of the oracle to create requests to",
        "_messengerChainlinkToken": "2. the address of LINK token contract",
        "_messengerJobId": "3. the job id for Staking efficiency job",
        "_networkAnalyticsAddress": "4. Network analytics contract address"
      }
    },
    "fee()": { "details": "returns the chainlink fee value on LINK tokens" },
    "fulfillSLI(bytes32,uint256)": {
      "details": "callback function for the Chainlink SLI request which stores the SLI in the SLA contract",
      "params": {
        "_chainlinkResponseUint256": "response object from Chainlink Oracles",
        "_requestId": "the ID of the ChainLink request"
      }
    },
    "jobId()": { "details": "returns the chainlink job id" },
    "messengerPrecision()": {
      "details": "returns the value of the messenger precision"
    },
    "oracle()": { "details": "returns the chainlink oracle contract address" },
    "owner()": { "details": "Returns the address of the current owner." },
    "parseSLIData(bytes32)": {
      "details": "recieves a string of \"hits,misses\" data and returns hits and misses as uint256",
      "params": { "sliData": "the ID of the ChainLink request" }
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "requestSLI(uint256,address)": {
      "details": "creates a ChainLink request to get a new SLI value for the given params. Can only be called by the SLARegistry contract or Chainlink Oracle.",
      "params": {
        "_periodId": "value of the period id",
        "_slaAddress": "SLA Address"
      }
    },
    "setSLARegistry()": {
      "details": "sets the SLARegistry contract address and can only be called once"
    },
    "slaRegistryAddress()": {
      "details": "returns the value of the sla registry address"
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "title": "SEMessenger"
}
