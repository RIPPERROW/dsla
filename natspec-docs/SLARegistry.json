{
  "details": "SLARegistry is a contract for handling creation of service level agreements and keeping track of the created agreements",
  "events": {
    "SLACreated(address,address)": {
      "details": "event for service level agreement creation logging",
      "params": {
        "owner": "2. The address of the owner of the service level agreement",
        "sla": "1. The address of the created service level agreement contract"
      }
    }
  },
  "kind": "dev",
  "methods": {
    "SLACount()": {
      "details": "public view function that returns the total amount of service level agreements",
      "returns": { "_0": "uint256, the length of SLA array" }
    },
    "allSLAs()": {
      "details": "public view function that returns all the service level agreements",
      "returns": { "_0": "SLA[] array of SLAs" }
    },
    "constructor": {
      "details": "constructor",
      "params": {
        "_messengerAddress": "the address of the chainlink messenger contract"
      }
    },
    "createSLA(address,bytes32[],address[],uint256,string,uint256,address,uint256[],uint256[],address)": {
      "details": "public function for creating service level agreements",
      "params": {
        "_SLONames": "2. array of the names of the service level objectives in bytes32",
        "_SLOs": "3. array of service level objective contract addressess service level objective breach",
        "_daiAddress": "10. DAI Token Address to accept by default",
        "_ipfsHash": "5. string with the ipfs hash that contains extra information about the service level agreement",
        "_owner": "1. address of the owner of the service level agreement",
        "_sla_period_ends": "9. array with the values for the \"end\" of every period",
        "_sla_period_starts": "8. array with the values for the \"start\" of every period",
        "_sliInterval": "6. uint the interval in seconds between requesting a new SLI",
        "_stake": "4. uint of the amount required to stake when signing the service level agreement",
        "_tokenAddress": "7. address of the DSLA token to be unlocked for staking"
      }
    },
    "getActivePool(address)": {
      "details": "returns the active pools owned by a user.",
      "params": { "_slaOwner": "1. owner of the active pool" },
      "returns": {
        "_0": "ActivePool[], array of structs: {SLAaddress,stake,assetName}"
      }
    },
    "requestSLI(uint256,address,bytes32)": {
      "details": "Gets SLI information for the specified SLA and SLO",
      "params": {
        "_periodId": "1. id of the period",
        "_sla": "2. SLA Address",
        "_sloName": "3. SLO Name"
      }
    },
    "userSLACount(address)": {
      "details": "public view function that returns the amount of service level agreements the given user is the owner of",
      "params": {
        "_user": "1. address of the user for which to return the amount of service level agreements"
      },
      "returns": { "_0": "uint256 corresponding to the amount of user's SLAs" }
    },
    "userSLAs(address)": {
      "details": "public view function that returns the service level agreements that the given user is the owner of",
      "params": {
        "_user": "Address of the user for which to return the service level agreements"
      },
      "returns": { "_0": "array of SLAs" }
    }
  },
  "stateVariables": {
    "SLAs": { "details": "stores the addresses of created SLAs" },
    "messenger": { "details": "Messenger of the SLA Registry" },
    "userToSLAIndexes": {
      "details": "stores the indexes of service level agreements owned by an user"
    }
  },
  "title": "SLARegistry",
  "version": 1
}
