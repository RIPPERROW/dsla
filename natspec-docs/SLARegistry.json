{
  "details": "SLARegistry is a contract for handling creation of service level agreements and keeping track of the created agreements",
  "methods": {
    "SLACount()": {
      "details": "public view function that returns the total amount of service level agreements",
      "returns": { "_0": "uint256, the length of SLA array" }
    },
    "allSLAs()": {
      "details": "public view function that returns all the service level agreements",
      "returns": { "_0": "SLA[] array of SLAs" }
    },
    "constructor": {
      "details": "constructor",
      "params": {
        "_sloRegistry": "1. SLO Registry",
        "_periodRegistry": "2. Periods registry",
        "_messengerRegistry": "3. Messenger registry",
        "_stakeRegistry": "4. Stake registry"
      }
    },
    "createSLA(uint256,uint8,bool,address,uint8,uint128,uint128,string,bytes32[])": {
      "details": "public function for creating canonical service level agreements",
      "params": {
        "_sloValue": "1. -",
        "_sloType": "2. -",
        "_ipfsHash": "3. -",
        "_periodType": "4. -",
        "_initialPeriodId": "5. -",
        "_finalPeriodId": "6. -",
        "_messengerAddress": "7. -",
        "_whitelisted": "8. -",
        "_extraData": "9. -"
      }
    },
    "isRegisteredSLA(address)": {
      "details": "public view function that returns true if _slaAddress was deployed using this SLARegistry",
      "params": { "_slaAddress": "address of the SLA to be checked" }
    },
    "owner()": { "details": "Returns the address of the current owner." },
    "registerMessenger(address,string,string,string)": {
      "details": "function to declare this SLARegistry contract as SLARegistry of _messengerAddress",
      "params": { "_messengerAddress": "1. address of the messenger" }
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "requestSLI(uint256,address,bool)": {
      "details": "Gets SLI information for the specified SLA and SLO",
      "params": {
        "_periodId": "1. id of the period",
        "_sla": "2. SLA Address",
        "_ownerApproval": "3. if approval by owner or msg.sender"
      }
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    },
    "userSLACount(address)": {
      "details": "public view function that returns the amount of service level agreements the given user is the owner of",
      "params": {
        "_user": "1. address of the user for which to return the amount of service level agreements"
      },
      "returns": { "_0": "uint256 corresponding to the amount of user's SLAs" }
    },
    "userSLAs(address)": {
      "details": "public view function that returns the service level agreements that the given user is the owner of",
      "params": {
        "_user": "Address of the user for which to return the service level agreements"
      },
      "returns": { "_0": "array of SLAs" }
    }
  },
  "title": "SLARegistry"
}
