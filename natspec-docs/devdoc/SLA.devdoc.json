{
  "details": "SLA is a service level agreement contract used for service downtime compensation",
  "events": {
    "SLICreated(uint256,uint256,uint256)": {
      "details": "event for SLI creation logging",
      "params": {
        "_timestamp": "1. the time the SLI has been registered",
        "_value": "2. the value of the SLI",
        "_periodId": "3. the id of the given period"
      }
    }
  },
  "kind": "dev",
  "methods": {
    "constructor": {
      "params": {
        "_owner": "1. address of the owner of the service level agreement",
        "_SLONames": "2. array of the names of the service level objectives in bytes32",
        "_SLOs": "3. array of service level objective contract addressess service level objective breach",
        "_stake": "4. uint of the amount required to stake when signing the service level agreement",
        "_ipfsHash": "5. string with the ipfs hash that contains extra information about the service level agreement",
        "_sliInterval": "6. uint the interval in seconds between requesting a new SLI",
        "_tokenAddress": "7. address of the DSLA token to be unlocked for staking",
        "_sla_period_starts": "8. array with the values for the \"start\" of every period",
        "_sla_period_ends": "9. array with the values for the \"end\" of every period"
      }
    },
    "getDetails()": {
      "details": "external view function that returns all agreement information",
      "returns": {
        "_0": "address owner",
        "_1": "string aasdad",
        "_2": "uint256 aasdad",
        "_3": "bytes32[] aasdad",
        "_4": "SL[] aasdad"
      }
    },
    "getSLI(bytes32)": {
      "details": "external function to get SLIs of certain _SLO",
      "params": { "_SLOName": "1. the name of the SLO in bytes32" },
      "returns": { "_0": "SLI[] array of SLIs associated to the input SLOs" }
    },
    "getSliInterval()": {
      "details": "external view function that returns the sliInterval value",
      "returns": { "_0": "uint256 value of the sliInterval" }
    },
    "owner()": { "details": "Returns the address of the current owner." },
    "registerSLI(bytes32,uint256,uint256)": {
      "details": "external function to register SLI's and check them against the SLO's",
      "params": {
        "_SLOName": "1. the name of the SLO in bytes32",
        "_value": "2. the value of the SLI to check",
        "_periodId": "3. the id of the given period"
      }
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "stakersCount()": {
      "details": "public view function that returns the total amount of stakers"
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "stateVariables": {
    "SLIs": {
      "details": "mapping to get SLI structs from SLO names in bytes32"
    },
    "SLONames": {
      "details": "array storing the names of the SLO's of this agreement"
    },
    "SLOs": {
      "details": "mapping to get SLO addresses from SLO names in bytes32"
    },
    "ipfsHash": {
      "details": "The ipfs hash that stores extra information about the agreement"
    },
    "registry": { "details": "The address of the registry contract" },
    "sliInterval": { "details": "The time between SLI registration" },
    "stake": {
      "details": "The required amount to stake when subscribing to the agreement"
    }
  },
  "title": "SLA",
  "version": 1
}
