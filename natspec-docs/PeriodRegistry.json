{
  "details": "SLARegistry is a contract for handling creation of service level agreements and keeping track of the created agreements",
  "events": {
    "PeriodInitialized(uint8,uint256)": {
      "details": "event to log a new period initialized",
      "params": {
        "periodType": "1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly",
        "periodsAdded": "2. amount of periods added"
      }
    }
  },
  "kind": "dev",
  "methods": {
    "addPeriodsToPeriodType(uint8,uint256[],uint256[])": {
      "details": "function to add new periods to certain period type",
      "params": {
        "_periodType": "1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly",
        "_periodStarts": "2. array of uint256 of the period starts to add",
        "_periodEnds": "3. array of uint256 of the period starts to add"
      }
    },
    "getPeriodDefinitions()": {
      "details": "public function to get the periodDefinitions"
    },
    "getPeriodStartAndEnd(uint8,uint256)": {
      "details": "public function to get the start and end of a period",
      "params": {
        "_periodType": "1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly",
        "_periodId": "2. period id to get start and end"
      }
    },
    "initializePeriod(uint8,uint256[],uint256[])": {
      "details": "public function for creating canonical service level agreements",
      "params": {
        "_periodType": "1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly",
        "_periodStarts": "2. array of the starts of the period",
        "_periodEnds": "3. array of the ends of the period"
      }
    },
    "isValidPeriod(uint8,uint256)": {
      "details": "public function to check if a period id is valid i.e. it belongs to the added id array",
      "params": {
        "_periodType": "1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly",
        "_periodId": "2. period id to get start and end"
      }
    },
    "owner()": { "details": "Returns the address of the current owner." },
    "periodIsFinished(uint8,uint256)": {
      "details": "public function to check if a period has finished",
      "params": {
        "_periodType": "1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly",
        "_periodId": "2. period id to get start and end"
      }
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "stateVariables": {
    "periodDefinitions": {
      "details": "(periodType=>PeriodDefinition) hourly/weekly/biWeekly/monthly/yearly are periodTypes"
    }
  },
  "title": "SLARegistry",
  "version": 1
}
